{"version":3,"sources":["components/Context/index.js","components/Timer.js","components/Question.js","components/QuestionResult.js","components/AnswerForm.js","components/Start.js","components/GameResult.js","App.js","serviceWorker.js","index.js"],"names":["TriviaGameContext","React","createContext","Provider","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","questionNumber","questions","question","answers","correctAnswer","image","stage","correct","timeRemaining","questionCorrect","shuffle","qarr","i","j","Math","floor","random","temp","handleStart","setState","handleQuestionAnswer","choice","parseInt","handleRestart","tick","inherits","createClass","key","value","react_default","a","createElement","actions","start","questionAnswer","restart","props","children","Component","Context","Consumer","Timer","intervalID","setInterval","context","clearInterval","contextType","Question","className","QuestionResult","answerNumber","alt","src","RadioButtonsGroup","handleChange","event","target","setTimeout","_this2","classes","root","FormControl_default","component","formControl","RadioGroup_default","aria-label","name","group","onChange","FormControlLabel_default","control","Radio_default","color","label","labelPlacement","withStyles","theme","margin","spacing","unit","Start","index_es","variant","onClick","GameResult","App","page","components_Start","components_Timer","components_Question","AnswerForm","components_QuestionResult","components_GameResult","Boolean","window","location","hostname","match","ReactDOM","render","Context_Provider","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8df48406.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nconst TriviaGameContext = React.createContext();\r\n\r\nexport class Provider extends Component {\r\n    state = {\r\n        questionNumber: 0,\r\n        questions: [{\r\n            question: \"Which character said: If I was dead you could bang me all you want. I mean, who cares? A dead body is like a piece of trash. I mean, shove as much shit in there as you want. Fill me up with cream, make a stew out of my ass. What's the big deal? Bang me, eat me, grind me up into little pieces, throw me in the river. Who gives a shit? You're dead, you're dead! Oh shit! Is my mic on?\",\r\n            answers: [\"Charlie\", \"Mac\", \"Frank\", \"Dennis\"],\r\n            correctAnswer: 2,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-danny-devito.jpg\"\r\n          }, {\r\n            question: \"Yeah! Okay! This is great because earlier, you were implying that I was racist because you thought that I was implying that all black people are related, and then it turns out that you people actually are!\",\r\n            answers: [\"Mac\", \"Frank\", \"Dee\", \"Cricket\"],\r\n            correctAnswer: 0,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-rob-mcelhenney.jpg\"\r\n          }, {\r\n            question: \"Which character said: That's bullshit, 'cause I'm a better smasher than you guys! I should be on the head of the smashing team! You wanna have a smash-off?\",\r\n            answers: [\"Artemis\", \"Doyle McPoyle\", \"Mac\", \"Dee\"],\r\n            correctAnswer: 2,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-rob-mcelhenney.jpg\"\r\n          }, {\r\n            question: \"Which character said: Oh not too much, Charlie is using you to prove that he's not racist, and then he asked me out on a date?\",\r\n            answers: [\"Dee\", \"Ruby Taft\", \"The Waitress\", \"Artemis\"],\r\n            correctAnswer: 2,\r\n            image: \"https://d1o51r9qdgnnlz.cloudfront.net/static_image/d93b4f7a-4b7f-4a11-82f3-4041a23c156e/static.jpg\"\r\n          }, {\r\n            question: \"Which character said: Hello. Who is this? Who?... Who is...? I don't know that name. Who? Who? Oh, oh, Waitress. Why didn't you just say that?\",\r\n            answers: [\"Dee\", \"Frank\", \"Charlie\", \"Dennis\"],\r\n            correctAnswer: 3,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-glenn-howerton.jpg\"\r\n          }, {\r\n            question: \"Which character said: Because Dennis is a bastard man!\",\r\n            answers: [\"Dennis\", \"Dee\", \"Charlie\", \"Mac\"],\r\n            correctAnswer: 0,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-glenn-howerton.jpg\"\r\n          }, {\r\n            question: \"Which character said: Did you fuck my mom, Santa Claus? Did you fuck my mom? Did you fuck her? DID YOU FUCK MY FUCKING MOM? DID YOU FUCK MY MOM, SANTA? AAAAH!\",\r\n            answers: [\"'Da Maniac\", \"Charlie\", \"Mac\", \"Dennis\"],\r\n            correctAnswer: 1,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-charlie-day.jpg\"\r\n          }, {\r\n            question: \"Which character said: Hey, did he send you any dick pics? 'Cause it could be a mess down there.\",\r\n            answers: [\"Dee\", \"Artemis\", \"Mac\", \"The Waitress\"],\r\n            correctAnswer: 1,\r\n            image: \"http://i1.sndcdn.com/artworks-000225331003-evp1yy-original.jpg\"\r\n          }, {\r\n            question: \"Which character said: Mm. I have contained my rage for as long as possible, but I shall unleash my fury upon you like the crashing of a thousand waves! Begone, vile man! Begone from me! A starter car? This car is a finisher car! A transporter of gods! The golden god! I am untethered, and my rage knows no bounds!\",\r\n            answers: [\"Dee\", \"Frank\", \"Cricket\", \"Dennis\"],\r\n            correctAnswer: 3,\r\n            image: \"https://a1cf74336522e87f135f-2f21ace9a6cf0052456644b80fa06d4f.ssl.cf2.rackcdn.com/images/characters/p-its-always-sunny-in-philadelphia-glenn-howerton.jpg\"\r\n          }, {\r\n            question: \"Which character said: Hey do you guys mind if I go into the bathroom and smoke some PCP?\",\r\n            answers: [\"Mac\", \"Cricket\", \"Charlie\", \"Dennis\"],\r\n            correctAnswer: 1,\r\n            image: \"https://www.itsalways.com/wp-content/uploads/2017/07/Rickety-Cricket.jpg\"\r\n          }],\r\n        stage: \"beginning\",\r\n        correct: 0,\r\n        timeRemaining: 30,\r\n        questionCorrect: false\r\n    }\r\n\r\n    shuffle = (qarr) => {\r\n\t\tfor (let i =0; i< qarr.length;i++) {\r\n\t\t\tlet j = i + Math.floor(Math.random() * (qarr.length-i));\r\n\r\n\t\t\tlet temp = qarr[j];\r\n\t\t\tqarr[j] = qarr[i];\r\n\t\t\tqarr[i] = temp;\r\n\t\t}\r\n\t\treturn qarr;\r\n\t}\r\n\r\n    handleStart = () => {\r\n        this.setState({stage: \"question\", questions: this.shuffle(this.state.questions)});\r\n    }\r\n\r\n    handleQuestionAnswer = (choice) => {\r\n        if(parseInt(choice)===this.state.questions[this.state.questionNumber].correctAnswer) {\r\n            this.setState({correct: this.state.correct+1, stage: \"between\", questionNumber: this.state.questionNumber+1, timeRemaining: 5, questionCorrect: true});\r\n        } else {\r\n            this.setState({stage: \"between\", questionNumber: this.state.questionNumber+1, timeRemaining: 5, questionCorrect: false});\r\n        }\r\n    }\r\n\r\n    handleRestart = () => {\r\n        this.setState({questionNumber: 0, correct: 0, stage:\"question\", questions: this.shuffle(this.state.questions)});\r\n    }\r\n\r\n    tick =  () => {\r\n        if(this.state.timeRemaining===1) {\r\n            if(this.state.stage===\"between\" && this.state.questionNumber===this.state.questions.length) {\r\n                this.setState({timeRemaining: 30, stage: \"end\", questionCorrect: false});         \r\n            }\r\n            else if (this.state.stage===\"between\") {\r\n                this.setState({timeRemaining: 30, stage:\"question\"});    \r\n            }\r\n            else if (this.state.stage===\"question\") {\r\n                this.setState({timeRemaining: 5, stage: \"between\", questionNumber: this.state.questionNumber+1, questionCorrect: false});                \r\n            }\r\n        } else{\r\n            this.setState({timeRemaining: this.state.timeRemaining-1});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <TriviaGameContext.Provider value= {{\r\n                questionNumber: this.state.questionNumber,\r\n                questions: this.state.questions,\r\n                stage: this.state.stage,\r\n                correct: this.state.correct,\r\n                timeRemaining: this.state.timeRemaining,\r\n                questionCorrect: this.state.questionCorrect,\r\n                actions: {\r\n                    start: this.handleStart,\r\n                    questionAnswer: this.handleQuestionAnswer,\r\n                    tick: this.tick,\r\n                    restart: this.handleRestart\r\n                }\r\n            }}>\r\n                {this.props.children}\r\n            </TriviaGameContext.Provider>\r\n        );\r\n    }\r\n}\r\nexport const Context = TriviaGameContext;\r\nexport const Consumer = TriviaGameContext.Consumer;\r\n","import React, { Component } from 'react';\r\nimport { Context } from './Context';\r\n\r\n\r\n \r\nclass Timer extends Component {\r\n\r\n    componentDidMount() {\r\n        this.intervalID = setInterval(() => this.context.actions.tick(), 1000); \r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.intervalID);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.context.stage===\"question\"? <h1>{this.context.timeRemaining}</h1>: null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nTimer.contextType = Context;\r\n\r\nexport default Timer;","import React from 'react';\r\nimport { Consumer } from './Context';\r\n\r\nconst Question = () => {\r\n    return (\r\n        <Consumer>\r\n            {context=>{\r\n                return (\r\n                    <div>\r\n                        <h1 className=\"question\">{context.questions[context.questionNumber].question}</h1>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n        \r\n    );\r\n}\r\n\r\nexport default Question;","import React from 'react';\r\nimport { Consumer } from './Context';\r\n\r\nconst QuestionResult = () => {\r\n    return (\r\n        <Consumer>\r\n            {context=>{\r\n                const questionNumber = context.questionNumber-1;\r\n                const answerNumber = context.questions[questionNumber].correctAnswer;\r\n                return (\r\n                    <div>\r\n                        <h1>{`You are ${context.questionCorrect ? \"correct\" : \"incorrect\"}!`}</h1>\r\n                        <h1>{`The correct answer is ${context.questions[questionNumber].answers[answerNumber]}`}</h1>\r\n                        <img className=\"answerPic\" alt=\"answer\" src={context.questions[questionNumber].image} />\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>        \r\n    );\r\n}\r\n\r\nexport default QuestionResult;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { Consumer, Context } from './Context';\r\n\r\nconst styles = theme => ({\r\n  root: {\r\n  },\r\n  formControl: {\r\n    margin: theme.spacing.unit * 3,\r\n  },\r\n  group: {\r\n    margin: `${theme.spacing.unit}px 0`,\r\n  },\r\n});\r\n\r\nclass RadioButtonsGroup extends React.Component {\r\n  state = {\r\n    value: '',\r\n  };\r\n\r\n  handleChange = event => {\r\n    this.setState({ value: event.target.value }, ()=>{setTimeout(()=>{this.context.actions.questionAnswer(this.state.value)}, 300)});\r\n  };\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    return (\r\n      <Consumer>\r\n          {context=>{\r\n              return (\r\n                <div className={classes.root}>\r\n                    <FormControl component=\"fieldset\" className={classes.formControl}>\r\n                    <RadioGroup\r\n                        aria-label=\"answer\"\r\n                        name=\"answer\"\r\n                        className={classes.group}\r\n                        value={this.state.value}\r\n                        onChange={this.handleChange}\r\n                    >\r\n                        <FormControlLabel\r\n                        value=\"0\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label={context.questions[context.questionNumber].answers[0]}\r\n                        labelPlacement=\"start\"\r\n                        />\r\n                        <FormControlLabel\r\n                        value=\"1\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label={context.questions[context.questionNumber].answers[1]}\r\n                        labelPlacement=\"start\"\r\n                        />\r\n                        <FormControlLabel\r\n                        value=\"2\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label={context.questions[context.questionNumber].answers[2]}\r\n                        labelPlacement=\"start\"\r\n                        />\r\n                        <FormControlLabel\r\n                        value=\"3\"\r\n                        control={<Radio color=\"primary\" />}\r\n                        label={context.questions[context.questionNumber].answers[3]}\r\n                        labelPlacement=\"start\"\r\n                        />\r\n                    </RadioGroup>\r\n                    </FormControl>\r\n                </div>\r\n              );\r\n          }}\r\n      </Consumer>  \r\n    );\r\n  }\r\n}\r\n\r\nRadioButtonsGroup.contextType = Context;\r\n\r\nRadioButtonsGroup.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(RadioButtonsGroup);","import React from 'react';\r\nimport { Consumer } from './Context';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst Start = () => {\r\n    return (\r\n        <Consumer>\r\n            {context=>{\r\n                return (\r\n                    <div>\r\n                        <h1>Welcome to Always Sunny Quote Trivia!</h1>\r\n                        <h3>You will have 30 seconds per question. Press the start button below to begin the game.</h3>\r\n                        <Button variant=\"contained\" className=\"startButton\" color=\"primary\" onClick={context.actions.start}>Start!</Button>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    );\r\n}\r\n\r\nexport default Start;","import React from 'react';\r\nimport { Consumer } from './Context';\r\nimport { Button } from '@material-ui/core';\r\n\r\nconst GameResult = () => {\r\n    return (\r\n        <Consumer>\r\n            {context=>{\r\n                return (\r\n                    <div>\r\n                        <h1>Game Over!</h1>\r\n                        <h1>{`You got ${context.correct} out of ${context.questionNumber} correct!`}</h1>\r\n                        <Button variant=\"contained\" color=\"primary\" className=\"restartButton\" onClick={context.actions.restart}>Restart!</Button>\r\n                    </div>\r\n                );\r\n            }}\r\n        </Consumer>\r\n    )\r\n}\r\n\r\nexport default GameResult;","import React from 'react';\nimport './App.css';\nimport Timer from './components/Timer';\nimport { Consumer } from './components/Context';\nimport Question from './components/Question';\nimport QuestionResult from './components/QuestionResult';\nimport AnswerForm from './components/AnswerForm';\nimport Start from './components/Start';\nimport GameResult from './components/GameResult';\n\nfunction App() {\n  return(\n    <Consumer>\n      {context=>{\n        let page;\n        switch(context.stage) {\n          case \"beginning\":\n            page=<Start />;\n            break;\n          case \"question\":\n            page=<div>\n                  <Timer />\n                  <Question />\n                  <AnswerForm />\n                </div>;\n            break;\n          case \"between\": \n            page=<div>\n                  <Timer />\n                  <QuestionResult />\n                </div>;\n            break;\n          case \"end\": \n            page=<div>\n                  <GameResult />\n                </div>;\n            break;\n          default: \n            page=<div>\n                  <h1>error with game stage state</h1>\n                </div>\n        }\n        return (\n          <div className=\"App\">\n            <header className=\"App-header\">\n              <img src=\"https://external-preview.redd.it/vamnazEWjPlQWM3jZyVP6PbL_Ql93UCSfvb25Czrt4w.png?auto=webp&s=505cff58bedea30329c609c6cc1f3fe5e8ec4610\" className=\"App-logo\" alt=\"logo\" />\n            </header>\n            {page}\n          </div>\n        );\n      }}\n    </Consumer>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from './components/Context';\n\nReactDOM.render(\n<Provider>    \n    <App />\n</Provider>, \ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}